% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_concept.R
\name{plot_concept}
\alias{plot_concept}
\title{Plot of one chosen panel constituting conceptual plot (Z vs C, G vs Z|C or G vs C|Z)}
\usage{
plot_concept(
  Trait_categ = "Phenological",
  raw_dat = temp_std,
  GlobES_dat = met_ef_T,
  ES_dat = wide_tempES,
  path = "CZ",
  xvar_raw = "det_Clim",
  yvar_raw = "Trait_mean",
  slope_ES = "Estimate/Trait_mean<-det_Clim",
  ylab = "Trait",
  xlab = "Climate",
  ClEfSpecific = TRUE,
  miny = -6,
  maxy = 6
)
}
\arguments{
\item{Trait_categ}{Character specifying the level of the trait on which to subset the data.}

\item{raw_dat}{A data frame with raw data that were used to fit single-study SEMs.
The data should be prepared in the way it was prepared for SEMs (e.g. climate, trait
and GR variables have to be standardized).}

\item{GlobES_dat}{A data frame containing the across-study effect size estimates
per relation, obtained with the meta-analyses fitted using the function
\code{\link{fit_all_meta}}.}

\item{ES_dat}{A data frame containing the study-specific effect size estimates per
relation (in a wide format), extracted from prop_data object obtained with the
function \code{\link{fit_all_meta}}.}

\item{path}{Character specifying which relation will be visualized on the plot.
Three possible: "CZ", "ZG" and "CG".}

\item{xvar_raw}{Character specifying what variable from the raw dataset (raw_dat)
plot on the x axis.}

\item{yvar_raw}{Character specifying what variable from the raw dataset (raw_dat)
plot on the y axis.}

\item{slope_ES}{Character specifying the name of the relation to be used to plot
from the ES_dat.}

\item{ylab}{Character specifying the label for the y axis.}

\item{xlab}{Character specifying the label for the x axis.}

\item{ClEfSpecific}{Boolean indicating whether the meta-analyses were fitted separately for
studies with positive and negative effect of climate on traits.}

\item{miny}{Numeric specifying the minimum limit for the y axis.}

\item{maxy}{Numeric specifying the maximum limit for the y axis.}
}
\value{
Plots a requested relation (CZ, ZG or CG) for each study in the dataset and
overlays the across-study global effect sizes estimated with the meta-analyses.
}
\description{
\code{plot_concept} Plots one chosen relation from the path diagram:
Z vs C, G vs Z|C or G vs C|Z for each specific study and adds the
across-study effect sizes estimated with meta-analytical models
}
\examples{
allYrs_T <- do.call('rbind', lapply(X = unique(dataSEM$ID), FUN = function(x){
subs <- droplevels(dataSEM[dataSEM$ID == x, ])
full_NA <- data.frame(Year = seq(min(subs$Year), max(subs$Year), by = 1), ID = x)}))
 consec_yrs_T <- merge(allYrs_T, dataSEM, by = c('ID','Year'), all= T)
 # calculate GR
 temp_GR <- consec_yrs_T \%>\%
 dplyr::mutate(., Pop_mean_lag = c(Pop_mean[-1], NA)) \%>\%
 dplyr::mutate(., GR = log(Pop_mean_lag / Pop_mean)) \%>\%
 dplyr::filter(., !is.na(GR) & !is.na(Trait_mean) &
 !is.na(Demog_rate_mean) & !is.na(Pop_mean))
# get residuals for clim over time
 temp_GRRes <- split(temp_GR, temp_GR$ID) \%>\%
 purrr::map(., ~lm(Clim ~ Year, data = .)) \%>\%
 purrr::map2(.x = ., .y = split(temp_GR, f= temp_GR$ID),
 .f = ~broom::augment_columns(x = .x, data = .y)) \%>\%
 dplyr::bind_rows() \%>\%
 dplyr::select(-.rownames)
 # scale the variables as for the meta-analyses
 temp_std <- temp_GRRes \%>\%
 dplyr::group_by(ID) \%>\%
 dplyr::mutate(Trait_SE = Trait_SE / sd(Trait_mean, na.rm = T),
               Demog_rate_SE = Demog_rate_SE /sd(Demog_rate_mean, na.rm = T),
               det_Clim = as.numeric(scale(`.resid`)),
               Trait_mean = scale(Trait_mean),
               Demog_rate_mean = scale(Demog_rate_mean),
               Pop_mean = scale(Pop_mean),
               GR = scale(GR)) \%>\%
               dplyr::ungroup() \%>\%
               dplyr::mutate(Climatic_var = 'Temperature')

temp_std$GR <- as.numeric(temp_std$GR[,1])
 # prepare the data with paths extracted
 allES_T <- dataPaths \%>\%
 dplyr::mutate(Climatic_var = 'Temperature',
 SError = Std.Error)
 wide_temp_all <- allES_T \%>\%
  dplyr::select(ID, Estimate, SError, P.Value, Relation) \%>\%
  tidyr::pivot_wider(id_cols = ID, names_from = Relation,
  values_from = c(Estimate, SError, P.Value), names_sep = '/')

  metaD_temp_all <- allES_T \%>\%
  dplyr::distinct(ID, .keep_all = TRUE) \%>\%
  dplyr::select(-c(Estimate, SError, Relation,
                  P.Value, Pvalue, Count, Nyears,
                  WinDur, Ref.day, Ref.month,
                  WindowClose, deltaAIC, Trait_ageClass,
                  WeathQ, GenLength_y_IUCN))

wide_tempES_all <- (merge(wide_temp_all, metaD_temp_all, by = 'ID'))
# and estimating the global, across-study estimates

dataPaths_sp <- dataPaths \%>\%
                  dplyr::mutate(Species = dplyr::case_when(
                         Species == 'Cyanistes caeruleus' ~ 'Parus caeruleus',
                         Species == 'Thalasseus sandvicensis' ~ 'Sterna sandvicensis',
                         Species == 'Setophaga caerulescens' ~ 'Dendroica caerulescens',
                         Species == 'Thalassarche melanophris' ~ 'Thalassarche melanophrys',
                         Species == 'Ichthyaetus audouinii' ~ 'Larus audouinii',
                         Species == 'Stercorarius maccormicki' ~ 'Catharacta maccormicki',
                         TRUE ~ Species))

dataPaths_sp$Species <- unlist(lapply(1:nrow(dataPaths_sp), FUN = function(x){
  binary <- strsplit(as.character(dataPaths_sp$Species[x]), " ")
  Underscore <- paste(binary[[1]][1], binary[[1]][2], sep = "_")}))
dataPaths_sp$Sp_phylo <- dataPaths_sp$Species

meta_Phen_Cov <- fit_all_meta(data_MA = dataPaths_sp,
                              Demog_rate = NULL,
                              Trait_categ = 'Phenological',
                              Clim = 'Temperature',
                              Cov_fact = 'WeathQ',
                              COV = 'Pvalue',
                              sel = 'Temp_Phen_Cov',
                              folder_name = NULL,
                              colr = c('black', 'red'),
                              DD = 'n_effectGR',
                              simpleSEM = TRUE,
                              A = phyloMat,
                              all_Relations = c('Trait_mean<-det_Clim'))
globES_T <-  meta_Phen_Cov$meta_res[[1]] \%>\%
dplyr::filter(Levels_Covar == 'intrcpt') \%>\%
dplyr::mutate(Trait_Categ = 'Phenological',
            REL ='CZ')
# plot
PhenT_CZ <- plot_concept(Trait_categ = 'Phenological',
                        raw_dat = temp_std,
                        GlobES_dat = globES_T,
                        ES_dat = wide_tempES_all,
                        path = 'CZ',
                        xvar_raw = 'det_Clim',
                        yvar_raw = 'Trait_mean',
                        slope_ES = 'Estimate/Trait_mean<-det_Clim',
                        ylab = 'Phenology, Z',
                        xlab = 'Temperature, C',
                        ClEfSpecific = FALSE,
                        miny = -4, maxy = 4)
}
